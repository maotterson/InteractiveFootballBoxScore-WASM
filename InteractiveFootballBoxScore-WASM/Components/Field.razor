@inject State.GameState GameState
@inject State.PlayState PlayState
<div class="flex flex-row">
    <!-- endzone 1 -->
    <svg class="mx-0" style="width:8%;height:100%;">
        <rect width="100%" height="100%" fill="@homeColor()" stroke="black" />
    </svg>

    <!-- play area -->
    <svg class="mx-0 " style="width:84%;height:100%;">
      <g>
        <rect width="100%" height="100%" fill="green" stroke="black" />
    
        <!-- yardlines -->
        @for(int i=5; i<=95; i+=5)
        {
            if(i==50)
            {
                <line x1="@i%" y1="0%" x2="@i%" y2="100%" stroke="white" stroke-width="2"/>
            }
            else
            {
                <line x1="@i%" y1="0%" x2="@i%" y2="100%" stroke="white"/>    
            }
        }

        <ellipse cx="@ballSpot()%" cy="50%" rx="@ballWidth%" ry="@ballHeight%" stroke="brown" fill="brown" stroke-width="1"/>
    
      </g>
    </svg>
    <!-- endzone 2 -->
    <svg class="mx-0 " style="width:8%;height:100%;">
        <rect width="100%" height="100%" fill="@awayColor()" stroke="black" />
    </svg>
</div>

@code {
    private int ballWidth { get; set; } = 1;
    private int ballHeight { get; set; } = 2;

    protected override void OnInitialized()
    {
        PlayState.OnChange += StateHasChanged;
    }
    public void Dispose()
    {
        PlayState.OnChange -= StateHasChanged;
    }

    private int ballSpot()
    {
        // set position of ball based on possession
        if (PlayState.CurrentPlay.IsHomePossession)
        {
            return 50 - ballWidth;
        }
        return 50 + ballWidth;
    }
    private string homeColor()
    {
        return GameState.CurrentGame.Home.PrimaryColor;
    }
    private string awayColor()
    {
        return GameState.CurrentGame.Away.PrimaryColor;
    }
}

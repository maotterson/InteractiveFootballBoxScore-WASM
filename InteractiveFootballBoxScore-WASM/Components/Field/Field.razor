@using InteractiveFootballBoxScore_WASM.PbpParser.Models
@inject State.GameState GameState
@inject State.PlayState PlayState
<div class="flex flex-row">
    <!-- paint endzone 1 -->
    <svg class="mx-0" style="width:8%;height:100%;">
        <rect width="100%" height="100%" fill="@Home.PrimaryColor" stroke="black" />
    </svg>

    <!-- paint play area -->
    <svg class="mx-0 " style="width:84%;height:100%;">
      <g>
        <rect width="100%" height="100%" fill="green" stroke="black" />
        <FieldPainter/>

        <!-- draw ball -->
        <ellipse cx="@ballSpot%" cy="50%" rx="@ballWidth%" ry="@ballHeight%" stroke="brown" fill="brown" stroke-width="1"/>
    
      </g>
    </svg>
    <!-- paint endzone 2 -->
    <svg class="mx-0 " style="width:8%;height:100%;">
        <rect width="100%" height="100%" fill="@Away.PrimaryColor" stroke="black" />
    </svg>
</div>

@code {
    // relative ball size on field
    private int ballWidth { get; set; } = 1;
    private int ballHeight { get; set; } = 2;
    private Team Home => GameState.CurrentGame.Home;
    private Team Away => GameState.CurrentGame.Away;
    private int ballSpot
    {
        get
        {
            // set position of ball based on possession
            if (PlayState.CurrentPlay.IsHomePossession)
            {
                return 50 - ballWidth;
            }
            return 50 + ballWidth;
        }
    }

    protected override void OnInitialized()
    {
        PlayState.OnChange += StateHasChanged;
    }
    public void Dispose()
    {
        PlayState.OnChange -= StateHasChanged;
    }
}
